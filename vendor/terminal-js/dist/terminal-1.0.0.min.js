(function(k) {
    var g = g || function(g, b) {
            function k(a, b) {
                if (b in m)
                    for (var f = a.length - 1; 0 <= f; f--)
                        if (a[f] == b) {
                            a.splice(f, 1);
                            break
                        }
                a.push(b);
                m[b] = !0
            }
            if (g) {
                var e = {
                    welcome: "",
                    prompt: "",
                    separator: "&gt;",
                    theme: "interlaced"
                }, b = b || e;
                b.welcome = b.welcome || e.welcome;
                b.prompt = b.prompt || e.prompt;
                b.separator = b.separator || e.separator;
                b.theme = b.theme || e.theme;
                var q = Array.prototype.slice.call(arguments, 2),
                    h = localStorage.history ? JSON.parse(localStorage.history) : [],
                    m = localStorage.historySet ? JSON.parse(localStorage.historySet) : [],
                    i = h.length,
                    r = "",
                    j = document.getElementById(g);
                j.classList.add("terminal");
                j.classList.add("terminal-" + b.theme);
                j.insertAdjacentHTML("beforeEnd", ['<div class="background"><div class="interlace"></div></div><div class="container"><output></output><table class="input-line">', '<tr><td nowrap><div class="prompt">' + b.prompt + b.separator + '</div></td><td width="100%"><input class="cmdline" autofocus /></td></tr>', "</table></div>"].join(""));
                var e = j.querySelector(".container"),
                    n = e.querySelector(".input-line"),
                    c = e.querySelector(".input-line .cmdline"),
                    l = e.querySelector("output"),
                    s = e.querySelector(".prompt"),
                    p = document.querySelector(".background"),
                    o = [];
                l.addEventListener("DOMSubtreeModified", function() {
                    setTimeout(function() {
                        c.scrollIntoView()
                    }, 0)
                }, !1);
                b.welcome && (l.insertAdjacentHTML("beforeEnd", b.welcome), c.scrollIntoView());
                window.addEventListener("click", function() {
                    c.focus()
                }, !1);
                l.addEventListener("click", function(a) {
                    a.stopPropagation()
                }, !1);
                c.addEventListener("click", function() {
                    this.value = this.value
                }, !1);
                n.addEventListener("click", function() {
                    c.focus()
                }, !1);
                c.addEventListener("keyup", function(a) {
                    27 == a.keyCode && (this.value = "", a.stopPropagation(), a.preventDefault());
                    if (h.length && (38 == a.keyCode || 40 == a.keyCode)) h[i] ? h[i] = this.value : r = this.value, 38 == a.keyCode ? (i--, 0 > i && (i = 0)) : 40 == a.keyCode && (i++, i > h.length && (i = h.length)), this.value = this.value = h[i] ? h[i] : r
                }, !1);
                c.addEventListener("keydown", function(a) {
                    if (13 == a.keyCode) {
                        if (a = this.value) k(h, a), localStorage.history = JSON.stringify(h), localStorage.historySet = JSON.stringify(m), i = h.length;
                        var b = this.parentNode.parentNode.parentNode.parentNode.cloneNode(!0);
                        b.removeAttribute("id");
                        b.classList.add("line");
                        var f = b.querySelector("input.cmdline");
                        f.autofocus = !1;
                        f.readOnly = !0;
                        f.insertAdjacentHTML("beforebegin", f.value);
                        f.parentNode.removeChild(f);
                        l.appendChild(b);
                        n.classList.add("hidden");
                        this.value = "";
                        var c;
                        if (a && a.trim()) {
                            var e = [],
                                d = "";
                            a.split(" ").join(" ").split("").forEach(function(a) {
                                " " == a ? d.length && ('"' != d[0] && "'" != d[0] ? (e.push(d), d = "") : d += a) : '"' == a || "'" == a ? d.length && d[0] == a ? (e.push(d.slice(1)), d = "") : d += a : d += a
                            });
                            e.push(d);
                            c = e.filter(function(a) {
                                return a
                            })
                        }
                        c = c || [];
                        for (a = 0; a < o.length; a++) b = o[a], "function" === typeof b && b(c);
                        a = c[0];
                        c = c.splice(1);
                        if (a) {
                            var b = !1,
                                g;
                            for (g in q)
                                if (f = q[g], f.execute && (b = f.execute(a, c, term)), !1 !== b) break;!1 === b && (b = a + ": command not found");
                            output(b)
                        }
                        n.classList.remove("hidden")
                    }
                }, !1);
                window.addEventListener("keyup", function(a) {
                    c.focus();
                    a.stopPropagation();
                    a.preventDefault()
                }, !1);
                this.processCommand = function(a) {
                    c.value = a;
                    a = new Event("keydown");
                    a.keyCode = 13;
                    c.dispatchEvent(a)
                };
                this.subscribe = function(a) {
                    o.push(a)
                };
                this.clear = function() {
                    l.innerHTML = "";
                    c.value = "";
                    p.style.minHeight = ""
                };
                this.output= this.print = output = function(a) {
                    l.insertAdjacentHTML("beforeEnd", a);
                    c.scrollIntoView()
                };
                this.println=function(a){
                    this.print('<br/>'+a);
                }
                this.setPrompt = function(a) {
                    s.innerHTML = a + b.separator
                };
                this.getPrompt = function() {
                    return s.innerHTML.replace(RegExp(b.separator + "$"), "")
                };
                this.setTheme = function(a) {
                    j.classList.remove("terminal-" + b.theme);
                    b.theme = a;
                    j.classList.add("terminal-" + b.theme)
                };
                this.getTheme = function() {
                    return b.theme
                };
                return term = this
            }
        };
    if ("undefined" !== typeof module && module.exports) module.exports = g;
    else if ("function" == typeof define && define.amd) define(function() {
        return g
    });
    else {
        var p = k.Terminal;
        g.noConflict = function() {
            k.Terminal = p;
            return g
        };
        k.Terminal = g
    }
})(this);